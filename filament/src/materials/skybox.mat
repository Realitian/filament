material {
    name : Skybox,
    parameters : [
        {
           type : bool,
           name : showSun
        },
        {
           type : samplerCubemap,
           name : skybox
        }
    ],
    variables : [
         eyeDirection
    ],
    vertexDomain : device,
    depthWrite : false,
    shadingModel : unlit,
    variantFilter : [ skinning, shadowReceiver ],
    culling: none
}

fragment {
    void material(inout MaterialInputs material) {
        prepareMaterial(material);
        vec3 sky = texture(materialParams_skybox, variable_eyeDirection.xyz).rgb;
        sky *= frameUniforms.iblLuminance;
        float gradient = 0.97;
        if (frameUniforms.sun.w >= 0.0f) {
            vec3 direction = normalize(variable_eyeDirection.xyz);
            vec3 sun = frameUniforms.lightColorIntensity.rgb * frameUniforms.lightColorIntensity.a;
            float cosAngle = dot(direction, frameUniforms.lightDirection);
            float x = (cosAngle - frameUniforms.sun.x) * frameUniforms.sun.z;
            gradient = pow(1.0 - saturate(x), frameUniforms.sun.w);
            sky = gradient * sun;
            float factor = 1.0 - direction.y;
            factor = (factor - 0.3 ) / 0.7;
            gradient = 0.97*factor;
        }
        material.baseColor = vec4(gradient, gradient, gradient, 1.0);
    }
}

vertex {
    void materialVertex(inout MaterialVertexInputs material) {
        float3 p = getPosition().xyz;
        float3 unprojected = mulMat4x4Float3(getViewFromClipMatrix(), p).xyz;
        material.eyeDirection.xyz = mulMat3x3Float3(getWorldFromViewMatrix(), unprojected);
    }
}
